Only in ../../source-api/: .git
diff -r api/.gitignore ../../source-api/.gitignore
1,9c1,2
< nbproject
< ._*
< .~lock.*
< .buildpath
< .DS_Store
< .idea
< .project
< .settings
< composer.lock
---
> vendor/
> composer.phar
Only in api/: .gitmodules
diff -r api/composer.lock ../../source-api/composer.lock
7c7
<     "hash": "3d8fc311b085e1e9bc4ed181947f205d",
---
>     "hash": "ea91f9228e482608949aa3a10a19f11d",
diff -r api/config/application.config.php ../../source-api/config/application.config.php
2a3
>     // This should be an array of module namespaces used in the application.
6c7
<         'Users'
---
>         'Users',
7a9,10
> 
>     // These are various options for the listeners attached to the ModuleManager
9,11c12,15
<         'config_glob_paths'    => array(
<             'config/autoload/{,*.}{global,local}.php',
<         ),
---
>         // This should be an array of paths in which modules reside.
>         // If a string key is provided, the listener will consider that a module
>         // namespace, the value of that key the specific path to that module's
>         // Module class.
15a20,50
> 
>         // An array of paths from which to glob configuration files after
>         // modules are loaded. These effectively override configuration
>         // provided by modules themselves. Paths may use GLOB_BRACE notation.
>         'config_glob_paths' => array(
>             'config/autoload/{,*.}{global,local}.php',
>         ),
> 
>         // Whether or not to enable a configuration cache.
>         // If enabled, the merged configuration will be cached and used in
>         // subsequent requests.
>         //'config_cache_enabled' => $booleanValue,
> 
>         // The key used to create the configuration cache file name.
>         //'config_cache_key' => $stringKey,
> 
>         // Whether or not to enable a module class map cache.
>         // If enabled, creates a module class map cache which will be used
>         // by in future requests, to reduce the autoloading process.
>         //'module_map_cache_enabled' => $booleanValue,
> 
>         // The key used to create the class map cache file name.
>         //'module_map_cache_key' => $stringKey,
> 
>         // The path in which to cache merged configuration.
>         //'cache_dir' => $stringPath,
> 
>         // Whether or not to enable modules dependency checking.
>         // Enabled by default, prevents usage of modules that depend on other modules
>         // that weren't loaded.
>         // 'check_dependencies' => true,
16a52,65
> 
>     // Used to create an own service manager. May contain one or more child arrays.
>     //'service_listener_options' => array(
>     //     array(
>     //         'service_manager' => $stringServiceManagerName,
>     //         'config_key'      => $stringConfigKey,
>     //         'interface'       => $stringOptionalInterface,
>     //         'method'          => $stringRequiredMethodName,
>     //     ),
>     // )
> 
>    // Initial configuration with which to seed the ServiceManager.
>    // Should be compatible with Zend\ServiceManager\Config.
>    // 'service_manager' => array(),
diff -r api/config/autoload/global.php ../../source-api/config/autoload/global.php
4a5
>         'driver' => 'Pdo',
7d7
<         'driver' => 'Pdo',
diff -r api/config/autoload/local.php.dist ../../source-api/config/autoload/local.php.dist
15,23d14
<     // Whether or not to enable a configuration cache.
<     // If enabled, the merged configuration will be cached and used in
<     // subsequent requests.
<     //'config_cache_enabled' => false,
<     // The key used to create the configuration cache file name.
<     //'config_cache_key' => 'module_config_cache',
<     // The path in which to cache merged configuration.
<     //'cache_dir' =>  './data/cache',
<     // ...
Only in api/data: db
diff -r api/init_autoloader.php ../../source-api/init_autoloader.php
6c6
<  * @copyright Copyright (c) 2005-2012 Zend Technologies USA Inc. (http://www.zend.com)
---
>  * @copyright Copyright (c) 2005-2015 Zend Technologies USA Inc. (http://www.zend.com)
23a24,27
> if (class_exists('Zend\Loader\AutoloaderFactory')) {
>     return;
> }
> 
26c30,32
< if (getenv('ZF2_PATH')) {           // Support for ZF2_PATH environment variable or git submodule
---
> if (is_dir('vendor/ZF2/library')) {
>     $zf2Path = 'vendor/ZF2/library';
> } elseif (getenv('ZF2_PATH')) {      // Support for ZF2_PATH environment variable or git submodule
30,31d35
< } elseif (is_dir('vendor/ZF2/library')) {
<     $zf2Path = 'vendor/ZF2/library';
36a41
>         $loader->add('ZendXml', $zf2Path);
diff -r api/LICENSE.txt ../../source-api/LICENSE.txt
1c1
< Copyright (c) 2005-2012, Zend Technologies USA, Inc.
---
> Copyright (c) 2005-2015, Zend Technologies USA, Inc.
diff -r api/module/Common/config/module.config.php ../../source-api/module/Common/config/module.config.php
2,8d1
< /**
<  * Zend Framework (http://framework.zend.com/)
<  *
<  * @link      http://github.com/zendframework/ZendSkeletonApplication for the canonical source repository
<  * @copyright Copyright (c) 2005-2012 Zend Technologies USA Inc. (http://www.zend.com)
<  * @license   http://framework.zend.com/license/new-bsd New BSD License
<  */
12a6,10
>             /*
>              * Add the listener as inbokable to the service_manager array
>              * so that we will be able to retrieve it from the
>              * service_manager later.
>              */
16c14
< );
\ No newline at end of file
---
> );
diff -r api/module/Common/Module.php ../../source-api/module/Common/Module.php
2,8d1
< /**
<  * Zend Framework (http://framework.zend.com/)
<  *
<  * @link      http://github.com/zendframework/ZendSkeletonApplication for the canonical source repository
<  * @copyright Copyright (c) 2005-2012 Zend Technologies USA Inc. (http://www.zend.com)
<  * @license   http://framework.zend.com/license/new-bsd New BSD License
<  */
12c5
< use Zend\Mvc\MvcEvent;
---
> use Zend\Mvc\Event;
16,20c9
<     /**
<      * Convenience method to return the config file
<      *
<      * @return string
<      */
---
> 
26,30d14
<     /**
<      * Return an autoloader configured namespace
<      *
<      * @return array
<      */
36c20
<                     __NAMESPACE__ => __DIR__ . '/src/' . __NAMESPACE__
---
>                     __NAMESPACE__ => __DIR__ . '/src/' . __NAMESPACE__,
42,43c26,33
<     /**
<      * Attaches the ApiErrorListener on the render event
---
> 
>     /*
>      * We initialize our listener when the module is being bootstrapped.
>      * Attaches the ApiErrorListener on the render event.
>      *
>      * The onBootstrap() method is called when ModuleManager is bootstrapping
>      * the module. We add the listener to EventManager using the
>      * onBootstrap() method.
51a42
>         // attach the listener when the module is being bootstrapped
diff -r api/module/Common/src/Common/Listeners/ApiErrorListener.php ../../source-api/module/Common/src/Common/Listeners/ApiErrorListener.php
4a5
> // define the components we are going to use.
10,16c11,13
< /**
<  * Listener attached to render to check the response.
<  * If the response contains an error a JSON model will
<  * be returned containing the error followinf the
<  * api problem API
<  *
<  * @package Common\Listeners
---
> /*
>  * By extending the AbstractListenerAggregate class, our class will be able
>  * to attach one or more listeners.
18c15
< class ApiErrorListener extends AbstractListenerAggregate
---
> class ApiErrorListener implements AbstractAggregateListener
20,21c17,19
<     /**
<      * Method to register this listener on the render event
---
>     /*
>      * Define the attach() method as required by the interface,
>      * ListenerAggregateInterface.
23,24c21,23
<      * @param EventManagerInterface $events
<      * @return void
---
>      * We have to attach our methods to the events we are interested in by
>      * calling the attach() method of EventManager and passing the event
>      * name, the method to call, and the priority as parameters.
28a28,34
>         /*
>         $this->listeners[] = $events->attach(
>             MvcEvent::EVENT_RENDER,
>             'ApiErrorListener::onRender',
>             1000
>         );
>          */
31,32c37,41
<     /**
<      * Method executed when the render event is triggered
---
>     /*
>      * Inspect the response, determine if there is an error, and format it
>      * if there is one.
>      *
>      * This method is executed when the render event is triggered
38a48,49
>         // do nothing if the response does not contain an error
>         // Or: If response is marked as 200 OK, just skip the error checking.
42a54
>         // otherwise, get the HTTP status code.
45a58,62
>         // retrieve the 'exception' variable from the ViewModel
>         // we are assuming that if something goes wrong, an exception
>         // will be thrown.
>         // This is why, in our controller, if the user is not in the
>         // database, we throw an exception (it will be caught here).
47a65
>         // create a new JsonModel with the data we extracted.
48a67,68
>             // specify the error code based on the code used in the exception.
>             // otherwise, use the HTTP error.
49a70
>             // specify the errorMsg based on the text of the exception.
51a73,75
>         // call JsonModel->setTerminal() method to set the terminal
>         // flag to 'true' and tell ZF2 to not wrap the return model
>         // in a layout.
53a78,79
>         // Attach the new JsonModel to the result, overwrite the previous
>         // one and set the corresponding status code.
57a84
> 
diff -r api/module/Users/config/module.config.php ../../source-api/module/Users/config/module.config.php
2,8d1
< /**
<  * Zend Framework (http://framework.zend.com/)
<  *
<  * @link      http://github.com/zendframework/ZendSkeletonApplication for the canonical source repository
<  * @copyright Copyright (c) 2005-2012 Zend Technologies USA Inc. (http://www.zend.com)
<  * @license   http://framework.zend.com/license/new-bsd New BSD License
<  */
diff -r api/module/Users/Module.php ../../source-api/module/Users/Module.php
2,8d1
< /**
<  * Zend Framework (http://framework.zend.com/)
<  *
<  * @link      http://github.com/zendframework/ZendSkeletonApplication for the canonical source repository
<  * @copyright Copyright (c) 2005-2012 Zend Technologies USA Inc. (http://www.zend.com)
<  * @license   http://framework.zend.com/license/new-bsd New BSD License
<  */
14,18c7
<     /**
<      * Convenience method to return the config file
<      *
<      * @return string
<      */
---
> 
24,28d12
<     /**
<      * Return an autoloader configured namespace
<      *
<      * @return array
<      */
38a23
> 
diff -r api/module/Users/src/Users/Model/UsersTable.php ../../source-api/module/Users/src/Users/Model/UsersTable.php
1a2
> 
12,13c13,14
<     /**
<      * Set db adapter
---
>     /*
>      * Set dbAdatper
18a20,25
>         /*
>          * The AdapterAwareInterface:
>          *
>          * Allows the dependency injector to set the adapter we have to use
>          * for database connections.
>          */
23,24c30,31
<     /**
<      * Method to get users by username
---
>     /*
>      * Get the user data by username.
diff -r api/module/Wall/config/module.config.php ../../source-api/module/Wall/config/module.config.php
2,8d1
< /**
<  * Zend Framework (http://framework.zend.com/)
<  *
<  * @link      http://github.com/zendframework/ZendSkeletonApplication for the canonical source repository
<  * @copyright Copyright (c) 2005-2012 Zend Technologies USA Inc. (http://www.zend.com)
<  * @license   http://framework.zend.com/license/new-bsd New BSD License
<  */
21c14
<                         'controller' => 'Wall\Controller\Index'
---
>                         'controller' => 'Wall\Controller\Index',
32c25
< );
\ No newline at end of file
---
> );
diff -r api/module/Wall/Module.php ../../source-api/module/Wall/Module.php
2,8d1
< /**
<  * Zend Framework (http://framework.zend.com/)
<  *
<  * @link      http://github.com/zendframework/ZendSkeletonApplication for the canonical source repository
<  * @copyright Copyright (c) 2005-2012 Zend Technologies USA Inc. (http://www.zend.com)
<  * @license   http://framework.zend.com/license/new-bsd New BSD License
<  */
14,18c7
<     /**
<      * Convenience method to return the config file
<      *
<      * @return string
<      */
---
> 
24,28d12
<     /**
<      * Return an autoloader configured namespace
<      *
<      * @return array
<      */
38a23
> 
diff -r api/module/Wall/src/Wall/Controller/IndexController.php ../../source-api/module/Wall/src/Wall/Controller/IndexController.php
2,8d1
< /**
<  * Zend Framework (http://framework.zend.com/)
<  *
<  * @link      http://github.com/zendframework/ZendSkeletonApplication for the canonical source repository
<  * @copyright Copyright (c) 2005-2012 Zend Technologies USA Inc. (http://www.zend.com)
<  * @license   http://framework.zend.com/license/new-bsd New BSD License
<  */
15,19d7
< /**
<  * This class is the responsible to answer the requests to the /wall endpoint
<  *
<  * @package Wall/Controller
<  */
22,25c10,11
<     /**
<      * Holds the table object
<      *
<      * @var UsersTable
---
>     /*
>      * Holds the $usersTable object
37a24
>         // retrieve the UsersTable object
41a29,36
>         /*
>          * If we have data, it means that the user exists. Therefore,
>          * we will proceed to return a JsonModel object containing a copy
>          * of the data.
>          *
>          * If the user isn't in the database, throw an exception that
>          * will be caught by a listener, which we will implement.
>          */
49a45,59
>      * This is a convenience method to load the usersTable db object and keeps track
>      * of the instance to avoid multiple of them
>      *
>      * @return UsersTable
>      */
>     protected function getUsersTable()
>     {
>         if (!$this->usersTable) {
>             $sm = $this->getServiceLocator();
>             $this->usersTable = $sm->get('Users\Model\UsersTable');
>         }
>         return $this->usersTable;
>     }
> 
>     /**
56c66
<         $this->methodNotAllowed();
---
>         return $this->methodNotAllowed();
66c76
<         $this->methodNotAllowed();
---
>         return $this->methodNotAllowed();
76c86
<         $this->methodNotAllowed();
---
>         return $this->methodNotAllowed();
86c96
<         $this->methodNotAllowed();
---
>         return $this->methodNotAllowed();
89c99
<     protected function methodNotAllowed()
---
>     public function methodNotAllowed()
91c101,103
<         $this->response->setStatusCode(\Zend\Http\PhpEnvironment\Response::STATUS_CODE_405);
---
>         $this->response->setStatusCode(
>             \Zend\Http\PhpEnvironment\Response::STATUS_CODE_405
>         );
94,107d105
<     /**
<      * This is a convenience method to load the usersTable db object and keeps track
<      * of the instance to avoid multiple of them
<      *
<      * @return UsersTable
<      */
<     protected function getUsersTable()
<     {
<         if (!$this->usersTable) {
<             $sm = $this->getServiceLocator();
<             $this->usersTable = $sm->get('Users\Model\UsersTable');
<         }
<         return $this->usersTable;
<     }
diff -r api/public/index.php ../../source-api/public/index.php
7a8,12
> // Decline static file requests back to the PHP built-in webserver
> if (php_sapi_name() === 'cli-server' && is_file(__DIR__ . parse_url($_SERVER['REQUEST_URI'], PHP_URL_PATH))) {
>     return false;
> }
> 
diff -r api/README.md ../../source-api/README.md
10d9
< 
20c19
<     php composer.phar create-project --repository-url="http://packages.zendframework.com" zendframework/skeleton-application path/to/install
---
>     php composer.phar create-project -sdev --repository-url="https://packages.zendframework.com" zendframework/skeleton-application path/to/install
49,52c48,77
< Virtual Host
< ------------
< Afterwards, set up a virtual host to point to the public/ directory of the
< project and you should be ready to go!
---
> Web Server Setup
> ----------------
> 
> ### PHP CLI Server
> 
> The simplest way to get started if you are using PHP 5.4 or above is to start the internal PHP cli-server in the root directory:
> 
>     php -S 0.0.0.0:8080 -t public/ public/index.php
> 
> This will start the cli-server on port 8080, and bind it to all network
> interfaces.
> 
> **Note: ** The built-in CLI server is *for development only*.
> 
> ### Apache Setup
> 
> To setup apache, setup a virtual host to point to the public/ directory of the
> project and you should be ready to go! It should look something like below:
> 
>     <VirtualHost *:80>
>         ServerName zf2-tutorial.localhost
>         DocumentRoot /path/to/zf2-tutorial/public
>         SetEnv APPLICATION_ENV "development"
>         <Directory /path/to/zf2-tutorial/public>
>             DirectoryIndex index.php
>             AllowOverride All
>             Order allow,deny
>             Allow from all
>         </Directory>
>     </VirtualHost>
diff -r api/vendor/autoload.php ../../source-api/vendor/autoload.php
7c7
< return ComposerAutoloaderInit675128e8df641fa4bc58306e4ed45220::getLoader();
---
> return ComposerAutoloaderInit5662fe428e8426f15d0cac8314c44465::getLoader();
diff -r api/vendor/bin/classmap_generator.php ../../source-api/vendor/bin/classmap_generator.php
1c1,7
< ../zendframework/zendframework/bin/classmap_generator.php
\ No newline at end of file
---
> #!/usr/bin/env sh
> SRC_DIR="`pwd`"
> cd "`dirname "$0"`"
> cd "../zendframework/zendframework/bin"
> BIN_TARGET="`pwd`/classmap_generator.php"
> cd "$SRC_DIR"
> "$BIN_TARGET" "$@"
Only in ../../source-api/vendor/bin: classmap_generator.php.bat
diff -r api/vendor/bin/pluginmap_generator.php ../../source-api/vendor/bin/pluginmap_generator.php
1c1,7
< ../zendframework/zendframework/bin/pluginmap_generator.php
\ No newline at end of file
---
> #!/usr/bin/env sh
> SRC_DIR="`pwd`"
> cd "`dirname "$0"`"
> cd "../zendframework/zendframework/bin"
> BIN_TARGET="`pwd`/pluginmap_generator.php"
> cd "$SRC_DIR"
> "$BIN_TARGET" "$@"
Only in ../../source-api/vendor/bin: pluginmap_generator.php.bat
diff -r api/vendor/bin/templatemap_generator.php ../../source-api/vendor/bin/templatemap_generator.php
1c1,7
< ../zendframework/zendframework/bin/templatemap_generator.php
\ No newline at end of file
---
> #!/usr/bin/env sh
> SRC_DIR="`pwd`"
> cd "`dirname "$0"`"
> cd "../zendframework/zendframework/bin"
> BIN_TARGET="`pwd`/templatemap_generator.php"
> cd "$SRC_DIR"
> "$BIN_TARGET" "$@"
Only in ../../source-api/vendor/bin: templatemap_generator.php.bat
diff -r api/vendor/composer/autoload_real.php ../../source-api/vendor/composer/autoload_real.php
5c5
< class ComposerAutoloaderInit675128e8df641fa4bc58306e4ed45220
---
> class ComposerAutoloaderInit5662fe428e8426f15d0cac8314c44465
22c22
<         spl_autoload_register(array('ComposerAutoloaderInit675128e8df641fa4bc58306e4ed45220', 'loadClassLoader'), true, true);
---
>         spl_autoload_register(array('ComposerAutoloaderInit5662fe428e8426f15d0cac8314c44465', 'loadClassLoader'), true, true);
24c24
<         spl_autoload_unregister(array('ComposerAutoloaderInit675128e8df641fa4bc58306e4ed45220', 'loadClassLoader'));
---
>         spl_autoload_unregister(array('ComposerAutoloaderInit5662fe428e8426f15d0cac8314c44465', 'loadClassLoader'));
47c47
< function composerRequire675128e8df641fa4bc58306e4ed45220($file)
---
> function composerRequire5662fe428e8426f15d0cac8314c44465($file)
Only in ../../source-api/vendor: ZF2
